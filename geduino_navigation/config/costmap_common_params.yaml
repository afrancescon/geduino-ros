# costmap_common_params.yaml
#
# Copyright (C) 2015 Alessandro Francescon
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The maximum range in meters at which to insert obstacles into the costmap using sensor data
obstacle_range: 2.5

# The maximum range in meters at which to raytrace out obstacles from the map using sensor data
raytrace_range: 3

# The radius of the robot in meters
robot_radius: 0.15

# The maximum distance in meters from obstacles at which a cost should be incurred.
# For example, setting the inflation radius at 0.55 meters means that the robot will treat all
# paths that stay 0.55 meters or more away from obstacles as having equal obstacle cost
inflation_radius: 0.55

# A list of observation source names separated by spaces.
# This defines each of the <source_name> namespaces defined below.
observation_sources: laser_scan_sensor
laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}

# Specifies the delay in transform (tf) data that is tolerable in seconds.
# This parameter serves as a safeguard to losing a link in the tf tree while still allowing
# an amount of latency the user is comfortable with to exist in the system.
# For example, a transform being 0.2 seconds out-of-date may be tolerable, but a
# transform being 8 seconds out of date is not. If the tf transform between the coordinate
# frames specified by the global_frame and robot_base_frame parameters is transform_tolerance
# seconds older than ros::Time::now(), then the navigation stack will stop the robot.
transform_tolerance: 0.2
